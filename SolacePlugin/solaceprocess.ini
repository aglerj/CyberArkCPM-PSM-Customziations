#Process
[states]
Init=(script)set verifyLogon 0; set curr_pass "<pmpass>"
logout=(script)set verifyLogon 1; set curr_pass "<pmnewpass>"; close

#Connection
StartSSH=(spawn)bin\\plink.exe <address> -ssh -P <port>
StoreKeyInCache=y

#CheckActions
CheckUserType
CheckAction1
CheckAction2

#Support Logon
SendSupportUID=<username>
SendCurrPass=$curr_pass

#Root Logon
SendExtra1UID=<extrapass1\username>
StoreKeyInCache2=y
SendExtraPass1=<pmextrapass1>
SU=su - <username>

#Admin Logon
SendAdminUID=<username>
SendAdminPass=$curr_pass

#Admin Change
Enable=enable
Config=config
TargetUser=username <username>
ChangeCmd=change-password <pmnewpass>

#Root or Support Change
Passwd=passwd
SendPMPass=<pmpass>
SendPMNewPass=<pmnewpass>
RepeatPMNewPass=<pmnewpass>

#Final States
END

FAILUnableToConnect=FAIL(Unable To Connect,8000)
FAILWrongPassword=FAIL(Permission Denied Error.  You may have a bad username or password or are not allowed to logon remotely.,8001)

[transitions]
#Jump Logon
Init,					TRUE,					StartSSH
StartSSH,				UnableToConnect,		FAILUnableToConnect
StartSSH,				PlinkStoreKey,			StoreKeyInCache
StartSSH,				Login,					CheckUserType
StoreKeyInCache,		Login,					CheckUserType


#Check User Type
CheckUserType,			IsSupport,				SendSupportUID
CheckUserType,			IsRoot,					SendExtra1UID
CheckUserType,			IsAdmin,				SendAdminUID

#AdminLogon
SendAdminUID,			Password,				SendAdminPass
SendAdminPass,			SolacePrompt,			CheckAction1
CheckAction1,			IsVerifyLogon,			END
CheckAction1,			ActionIsVerify,			END
CheckAction1,			ActionIsChange,			Enable

#Admin Change
Enable,					EnablePrompt,			Config
Config,					ConfigPrompt,			TargetUser
TargetUser,				ConfigUserPrompt,		ChangeCmd
ChangeCmd,				ConfigUserPrompt,		logout

#Support Logon
SendSupportUID,			PermissionDenied,		FAILWrongPassword
SendSupportUID,			Password,				SendCurrPass
SendCurrPass,			StandardPrompt,			CheckAction2
CheckAction2,			IsVerifyLogon,			END
CheckAction2,			ActionIsVerify,			END
CheckAction2,			ActionIsChange,			passwd

#Root Logon
SendExtra1UID,			Password,				SendExtraPass1
StoreKeyInCache2,		Password,				SendExtraPass1
SendExtraPass1,			StandardPrompt,			SU
SU,						Password,				SendCurrPass

#Support or Root Change
passwd,					NewPassword,			SendPMNewPass
passwd,					CurrentPassword,		SendPMPass
SendPMPass,				NewPassword,			SendPMNewPass
SendPMNewPass,			RetypeNewPassword,		RepeatPMNewPass
RepeatPMNewPass,		StandardPrompt,			logout
logout,					TRUE,					StartSSH

[CPM Parameters Validation]
#Validations that determine what arguments are required for proper plugin execution
username, source=FILE, Mandatory=yes
address, source=FILE, Mandatory=yes
port, source=FILE, Mandatory=yes
extrapass1\username, source=FILE, Mandatory=[string equal -nocase "<type>" "root"]
extrapass3\username, source=FILE, Mandatory=([string equal -nocase "<Action>" "reconcilepass"]|[string equal -nocase "<Action>" "prereconcilepass"])
extrapass3\port, source=FILE, Mandatory=([string equal -nocase "<Action>" "reconcilepass"]|[string equal -nocase "<Action>" "prereconcilepass"])

[parameters]
#Parameters that determine how the plugin sends information to the device. For example, how long to wait for a response, and how quickly to send characters
PromptTimeout=30
#SendSlow=1 .01
SendHuman=.1 .1 10 .05 .05

[Debug Information]
#When troubleshooting a plugin, set all debug flags to 'yes'
#When troubleshooting is finished, set all debug flags back to 'no' to avoid run-away debug logs
DebugLogFullParsingInfo=yes
DebugLogFullExecutionInfo=yes
DebugLogDetailBuiltInActions=yes
ExpectLog=yes
ConsoleOutput=yes